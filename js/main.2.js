// Generated by CoffeeScript 1.12.7
var animate, camera, controls, generate_particles, glows, glows_rv, init, mesh, obj_loader, onWindowResize, renderer, scene, texture;

camera = void 0;

scene = void 0;

renderer = void 0;

mesh = void 0;

texture = void 0;

controls = void 0;

glows = [];

glows_rv = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(function() {
  return (Math.random() - Math.random()) / 100.0;
});

obj_loader = function(mat) {
  var loader, manager;
  manager = new THREE.LoadingManager();
  manager.onProgress = function(i, l, p) {
    return console.log(i, l, p);
  };
  loader = new THREE.OBJLoader(manager);
  return loader.load("img/drop.obj", function(obj) {
    obj.traverse(function(c) {
      var p, s;
      if (c instanceof THREE.Mesh) {
        c.material = mat[0];
        s = c.clone();
        s.material = mat[1];
        p = new THREE.Group();
        p.add(s);
        p.add(c);
        p.scale.set(50, 50, 50);
        return scene.add(p);
      }
    });
    scene.add(obj);
    obj.material = mat;
    return mesh = obj;
  });
};

generate_particles = function() {
  var glowMat, glowSpr, glowTex, i, j, k, results, rr, s, tl;
  tl = new THREE.TextureLoader;
  glowTex = tl.load("img/glow.png");
  glowMat = new THREE.SpriteMaterial({
    map: glowTex,
    color: 0x555555,
    blending: THREE.AdditiveBlending
  });
  glowSpr = new THREE.Sprite(glowMat);
  glowSpr.scale.set(200.0, 200.0, 1.0);
  scene.add(glowSpr);
  for (i = j = 0; j <= 10; i = ++j) {
    glowMat = new THREE.SpriteMaterial({
      map: glowTex,
      color: 0x202020,
      blending: THREE.AdditiveBlending,
      rotation: Math.random() * 3.141 * 2.0
    });
    glows.push(glowMat);
    glowSpr = new THREE.Sprite(glowMat);
    glowSpr.scale.set(200.0 + Math.random() * 100.0, 10.0 + Math.random() * 20, 1.0);
    scene.add(glowSpr);
  }
  glowMat = new THREE.SpriteMaterial({
    map: glowTex,
    color: 0x202020,
    blending: THREE.AdditiveBlending
  });
  rr = function() {
    return Math.random() - Math.random();
  };
  results = [];
  for (i = k = 0; k <= 100; i = ++k) {
    s = Math.random() * 200.0 + 10.0;
    glowSpr = new THREE.Sprite(glowMat);
    glowSpr.position.set(rr(), rr(), rr());
    glowSpr.position.normalize();
    glowSpr.position.multiplyScalar(400.0 + Math.random() * 200.0);
    glowSpr.scale.set(s, s, 1.0);
    results.push(scene.add(glowSpr));
  }
  return results;
};

init = function() {
  var background, cubeTexture, f, gui, i, j, len, m, material_back, material_front, n, pointLight, ref, results;
  camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 1000);
  camera.position.z = 400;
  controls = new THREE.OrbitControls(camera);
  background = new THREE.Color(0xFA953C);
  scene = new THREE.Scene;
  scene.background = background;
  cubeTexture = new THREE.CubeTextureLoader().setPath('img/').load(['posx.jpg', 'negx.jpg', 'posy.jpg', 'negy.jpg', 'posz.jpg', 'negz.jpg']);
  cubeTexture.mapping = THREE.CubeRefractionMapping;
  cubeTexture.format = THREE.RGBFormat;
  generate_particles();
  pointLight = new THREE.PointLight(0xffffff, 2);
  pointLight.position.set(500, 500, 1000);
  scene.add(pointLight);
  pointLight = new THREE.PointLight(0xFF9933, 2);
  pointLight.position.set(-500, -500, 100);
  scene.add(pointLight);
  material_front = new THREE.MeshPhysicalMaterial({
    map: null,
    color: 0xDA751C,
    metalness: 0.0,
    roughness: 0,
    opacity: 0.5,
    side: THREE.FrontSide,
    transparent: true,
    envMapIntensity: 5,
    premultipliedAlpha: true,
    envMap: cubeTexture
  });
  material_back = new THREE.MeshPhysicalMaterial({
    map: null,
    color: 0xDA751Cf,
    metalness: 1.0,
    roughness: 0,
    opacity: 0.5,
    side: THREE.BackSide,
    transparent: true,
    envMapIntensity: 5,
    premultipliedAlpha: true,
    envMap: cubeTexture
  });
  obj_loader([material_back, material_front]);
  renderer = new THREE.WebGLRenderer({
    antialias: true
  });
  renderer.setPixelRatio(window.devicePixelRatio);
  renderer.setSize(window.innerWidth, window.innerHeight);
  document.body.appendChild(renderer.domElement);
  window.addEventListener('resize', onWindowResize, false);
  gui = new dat.GUI();
  n = ["Front", "Back"];
  ref = [material_front, material_back];
  results = [];
  for (i = j = 0, len = ref.length; j < len; i = ++j) {
    m = ref[i];
    f = gui.addFolder(n[i]);
    f.add(m, "roughness", 0.0, 1.0, 0.01);
    f.add(m, "metalness", 0.0, 1.0, 0.01);
    f.add(m, "opacity", 0.0, 1.0, 0.01);
    results.push(f.add(m, "envMapIntensity", -10.0, 10.0, 0.1));
  }
  return results;
};

onWindowResize = function() {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(window.innerWidth, window.innerHeight);
};

animate = function() {
  var g, i, j, len;
  requestAnimationFrame(animate);
  if (controls != null) {
    controls.update();
  }
  for (i = j = 0, len = glows.length; j < len; i = ++j) {
    g = glows[i];
    g.rotation += glows_rv[i];
  }
  renderer.render(scene, camera);
};

init();

animate();
